/*
 * Copyright (c) 2019-2022, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
import java.nio.file.Files
import java.nio.file.Paths

fusionauthJWTVersion = "5.1.2"
javaErrorVersion = "2.2.3"

project(group: "io.fusionauth", name: "fusionauth-client-builder", version: "1.41.0-EAP.20221022", licenses: ["ApacheV2_0"]) {
  workflow {
    fetch {
      cache()
      url(url: "https://repository.savantbuild.org")
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  dependencies {
    group(name: "source-jars") {
      dependency(id: "com.inversoft:java-error:${javaErrorVersion}", fetchSource: true)
      dependency(id: "io.fusionauth:fusionauth-jwt:${fusionauthJWTVersion}", fetchSource: true)
    }
  }

  publications {
    main {
      publication(name: project.name, type: "zip", file: "build/zips/fusionauth-client-builder.zip")
    }
  }
}

// Plugins
clientLibrary = loadPlugin(id: "com.inversoft.savant.plugin:client-library:0.3.3")
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:1.0.0")
file = loadPlugin(id: "org.savantbuild.plugin:file:1.0.0")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.0")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:1.0.0")

// Plugin settings
clientLibrary.settings.debug = false
//clientLibrary.settings.domainDirectory = Paths.get("src/main/domainNG")

target(name: "extract-source-jars") {
  // Download the source JARs
  dependency.resolve() {
    dependencies(group: "source-jars", transitive: true, fetchSource: true)
  }

  // clear out the expanded jars
  file.prune(dir: "build/src/")

  // Tried using dependency copy, but could not figure out how to get it to get the src jar, this is a hack, maybe there is a better way.
  def javaError = dependency.path(id: "com.inversoft:java-error:${javaErrorVersion}", group: "source-jars").toString()
  def fusionAuthJWT = dependency.path(id: "io.fusionauth:fusionauth-jwt:${fusionauthJWTVersion}", group: "source-jars").toString()

  file.unzip(file: javaError.replace("${javaErrorVersion}.jar", "${javaErrorVersion}-src.jar"), to: "build/src/java-error/")
  file.unzip(file: fusionAuthJWT.replace("${fusionauthJWTVersion}.jar", "${fusionauthJWTVersion}-src.jar"), to: "build/src/fusionauth-jwt/")
}

target(name: "generateDomain", description: "Generates all of the json files for the domain", dependsOn: ['extract-source-jars']) {
  // Bail during a release
  if (System.getProperty("fusionauth.release") != null) {
    println "skip generating domain during release"
    return
  }

  file.delete {
    fileSet(dir: "src/main/domain")
  }

  clientLibrary.generateDomainJson(srcDir: "../fusionauth-app/src/main/java/io/fusionauth/domain", outDir: "src/main/domain")
  clientLibrary.generateDomainJson(srcDir: "build/src/java-error/com/inversoft/error", outDir: "src/main/domain")
  clientLibrary.generateDomainJson(srcDir: "build/src/fusionauth-jwt/io/fusionauth/jwt/domain/", outDir: "src/main/domain")
  clientLibrary.generateDomainJson(srcDir: "build/src/fusionauth-jwt/io/fusionauth/jwks/domain/", outDir: "src/main/domain")

  [
      "io.fusionauth.domain.Buildable.json",
      "io.fusionauth.domain.Integration.json",
      "io.fusionauth.domain.internal.annotation.InternalUse.json",
      "io.fusionauth.domain.util.DefaultTools.json",
      "io.fusionauth.domain.util.Normalizer.json",
      "io.fusionauth.domain.util.SQLTools.json",
      "io.fusionauth.jwt.domain.Buildable.json",
      "io.fusionauth.jwt.domain.Header.json",
      "io.fusionauth.jwt.domain.KeyPair.json",
      "io.fusionauth.jwt.domain.KeyType.json",
      "io.fusionauth.jwt.domain.Type.json"
  ]
      .forEach({ Files.deleteIfExists(Paths.get("src/main/domain").resolve(it)) })
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "build", description: "A full build with domain for every client", dependsOn: ["generateDomain", "build-all"]) {
}

target(name: "clean", description: "Clean") {
  file.prune(dir: "build/zips")
}

//target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["generateDomain", "build-all"]) {
target(name: "int", description: "Releases a local integration build of the project", dependsOn: []) {
  file.zip(file: "build/zips/fusionauth-client-builder.zip") {
    fileSet(dir: "src/main")
  }

  dependency.integrate()
}

target(name: "pre-release") {
  System.setProperty("fusionauth.release", "true")
}

target(name: "release", description: "Release", dependsOn: ["clean", "pre-release", "int"]) {
  release.release()
}

/**
 * Execute `sb format` in the client library directory, relative to this directory
 */
void formatClientLibrary(String clientLibrary) {
  ProcessBuilder pb = new ProcessBuilder("sb", "format")
  def file = new File("../" + clientLibrary)
  def process = pb.inheritIO().directory(file).start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  if (process.exitValue() != 0) {
    fail("Unable to run `sb format` for client library [" + clientLibrary + "]")
  }
}

target(name: "build-angular", description: "Build the Angular Client Library") {
  clientLibrary.
      buildClient(template: "src/main/client/angular.client.ftl", outputFile: "../fusionauth-angular-client/src/FusionAuthClient.ts")
}

target(name: "build-java", description: "Build the Java Client Library") {
  // Build the FusionAuth client in fusionauth-app first. Then copy everything over to fusionauth-java-client and massage it.
  clientLibrary.buildClient(template: "src/main/client/java.client.ftl",
                            outputFile: "../fusionauth-app/src/main/java/io/fusionauth/client/FusionAuthClient.java")

  file.prune(dir: "../fusionauth-java-client/src/main/java/io/fusionauth/domain")
  file.copy(to: "../fusionauth-java-client/src/main/java/io/fusionauth/domain") {
    fileSet(dir: "../fusionauth-app/src/main/java/io/fusionauth/domain")
    filter(token: ", JSONColumnable", value: "")
    filter(token: "implements JSONColumnable, ", value: "")
    filter(token: "implements JSONColumnable", value: "")
    filter(token: "@JSONColumn", value: "")
    filter(token: "@ExcludeFromJSONColumn", value: "")
    filter(token: "import com.inversoft.mybatis.ExcludeFromJSONColumn;", value: "")
    filter(token: "import com.inversoft.mybatis.JSONColumn;", value: "")
    filter(token: "import com.inversoft.mybatis.JSONColumnable;", value: "")
  }
  file.prune(dir: "../fusionauth-java-client/src/main/java/io/fusionauth/client")
  file.copy(to: "../fusionauth-java-client/src/main/java/io/fusionauth/client") {
    fileSet(dir: "../fusionauth-app/src/main/java/io/fusionauth/client")
  }
}

target(name: "build-php", description: "Build the PHP Client Library") {
  clientLibrary.
      buildClient(template: "src/main/client/php.client.ftl", outputFile: "../fusionauth-php-client/src/FusionAuth/FusionAuthClient.php")
}

target(name: "build-csharp", description: "Build the C# Client Library") {
  clientLibrary.buildClient(template: "src/main/client/csharp.client.ftl",
                            outputFile: "../fusionauth-csharp-client/src/main/csharp/FusionAuthClient.cs")
}

target(name: "build-netcore", description: "Build the C# .netCore Client Library") {
  clientLibrary.buildClient(template: "src/main/client/netcore.client.interface.ftl",
                            outputFile: "../fusionauth-netcore-client/fusionauth-netcore-client/src/io/fusionauth/IFusionAuthClient.cs")
  clientLibrary.buildClient(template: "src/main/client/netcore.client.sync.ftl",
                            outputFile: "../fusionauth-netcore-client/fusionauth-netcore-client/src/io/fusionauth/FusionAuthSyncClient.cs")
  clientLibrary.buildClient(template: "src/main/client/netcore.client.ftl",
                            outputFile: "../fusionauth-netcore-client/fusionauth-netcore-client/src/io/fusionauth/FusionAuthClient.cs")
  file.delete {
    fileSet(dir: "../fusionauth-netcore-client/fusionauth-netcore-client/domain")
  }
  clientLibrary.buildDomain(template: "src/main/client/netcore.domain.ftl",
                            outputDir: "../fusionauth-netcore-client/fusionauth-netcore-client/domain",
                            extension: "cs")
}

target(name: "build-node", description: "Build the Node.js Client Library") {
  clientLibrary.buildClient(template: "src/main/client/node.client.ftl", outputFile: "../fusionauth-node-client/lib/FusionAuthClient.js")
}

target(name: "build-typescript", description: "Build the Typescript Client Library") {
  clientLibrary.
      buildClient(template: "src/main/client/typescript.client.ftl", outputFile: "../fusionauth-typescript-client/src/FusionAuthClient.ts")
}

target(name: "build-javascript", description: "Build the JavaScript Client Library") {
  clientLibrary.
      buildClient(template: "src/main/client/javascript.client.ftl", outputFile: "../fusionauth-javascript-client/lib/FusionAuthClient.js")
}

target(name: "build-python", description: "Build the Python Client Library") {
  clientLibrary.buildClient(template: "src/main/client/python.client.ftl",
                            outputFile: "../fusionauth-python-client/src/main/python/fusionauth/fusionauth_client.py")
}

target(name: "build-ruby", description: "Build the Ruby Client Library") {
  clientLibrary.
      buildClient(template: "src/main/client/ruby.client.ftl", outputFile: "../fusionauth-ruby-client/lib/fusionauth/fusionauth_client.rb")
}

target(name: "build-swift", description: "Build the Swift Client Library") {
  clientLibrary.
      buildClient(template: "src/main/client/swift.client.ftl", outputFile: "../fusionauth-swift-client/fusionauth/FusionAuthClient.swift")
}

target(name: "build-go", description: "Build the Go Client Library") {
  clientLibrary.buildClient(template: "src/main/client/go.client.ftl",
                            outputFile: "../go-client/pkg/fusionauth/Client.go")
  clientLibrary.buildClient(template: "src/main/client/go.domain.ftl",
                            outputFile: "../go-client/pkg/fusionauth/Domain.go")
  clientLibrary.buildClient(template: "src/main/client/go.domain.test.ftl",
                            outputFile: "../go-client/pkg/fusionauth/Domain_dynamic_test.go")
  formatClientLibrary("go-client")
}

target(name: "build-android", description: "Build the Android Client Library") {
  clientLibrary.buildClient(template: "src/main/client/android.client.ftl",
                            outputFile: "../fusionauth-android-client/src/main/java/io/fusionauth/client/FusionAuthClient.java")
}

target(name: "build-dart", description: "Build the Dart Client Library") {
  clientLibrary.buildClient(template: "src/main/client/dart.client.ftl",
                            outputFile: "../fusionauth-dart-client/lib/src/FusionAuthClient.dart")
  clientLibrary.buildClient(template: "src/main/client/dart.domain.ftl",
                            outputFile: "../fusionauth-dart-client/lib/src/FusionAuthDomain.dart")
  formatClientLibrary("fusionauth-dart-client")
}

target(name: "build-openapi", description: "Build the OpenAPI file") {
  projVersion = project.version.toString()
  cleanExecute(
      ["ruby", "bin/build-openapi-yaml.rb", "--source-directory", "./src", "--out", "../fusionauth-openapi/openapi.yaml", "--api-version", projVersion])
}

target(name: "build-all", description: "Builds all client libraries", dependsOn: ["build-java",
                                                                                  "build-php",
//                                                                                  "build-angular",
                                                                                  "build-go",
                                                                                  "build-netcore",
                                                                                  "build-node",
                                                                                  "build-typescript",
                                                                                  "build-javascript",
                                                                                  "build-openapi",
                                                                                  "build-python",
                                                                                  "build-ruby",
                                                                                  "build-dart"]) {
}


// Still testing this to see if it will work with stdout and prompts, etc which are required for dart, and python. Perhaps we can configure all of this to
// skip all requests for input or confirmations.
//
// Daniel: This is working, python requires interactive login, need to configure this credential, and then we should be able
//        to call this target from CI during a release.
//
target(name: "publish-all", description: "Publish all client libraries") {
  [
      "dart-client",
      "java-client",
      "netcore-client",
      "node-client",
      "php-client",
      "python-client",
      "ruby-client",
      "typescript-client",
      "openapi"
  ].each { client ->
    ProcessBuilder pb = new ProcessBuilder(
        "sb", "publish")
        .inheritIO()
        .directory(new File("../fusionauth-${client}"))

    def process = pb.start()
    process.consumeProcessOutput(System.out, System.err)
    process.waitFor()
    return process.exitValue() == 0
  }
}

boolean cleanExecute(List<String> args) {
  ProcessBuilder pb = new ProcessBuilder(args).inheritIO().directory(new File('.'))

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}
